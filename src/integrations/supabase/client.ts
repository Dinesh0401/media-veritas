
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "https://efoipjcxfdbojnrwefun.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVmb2lwamN4ZmRib2pucndlZnVuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMyMjg3MDUsImV4cCI6MjA1ODgwNDcwNX0.1XYpyG_0HeebE5WktT29AMegL8KhPnfom7CCxle3ZHI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
});

// Helper function to get the current user's access token for edge function calls
export const getAccessToken = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  return session?.access_token;
};

// Helper function to call edge functions with proper authentication
export const callEdgeFunction = async (
  functionName: string, 
  body: any
) => {
  const accessToken = await getAccessToken();
  
  const response = await fetch(
    `${SUPABASE_URL}/functions/v1/${functionName}`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`,
      },
      body: JSON.stringify(body),
    }
  );

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`Error calling function ${functionName}: ${errorData.error || response.statusText}`);
  }

  return await response.json();
};

// Enhanced version of generateReportPDF function
export const generateReportPDF = async (reportId: string) => {
  try {
    const result = await callEdgeFunction('generate-report-pdf', { reportId });
    return {
      success: true,
      data: result.data,
      message: result.message,
      verificationCode: result.verificationCode // Added verification code
    };
  } catch (error: any) {
    console.error('Error generating PDF:', error);
    return {
      success: false,
      message: error.message || 'Failed to generate report PDF'
    };
  }
};

// Function to verify a report using a verification code
export const verifyReport = async (reportId: string, verificationCode: string) => {
  try {
    const result = await callEdgeFunction('verify-report', { 
      reportId, 
      verificationCode 
    });
    
    return {
      success: true,
      verified: result.verified,
      report: result.report,
      message: result.message
    };
  } catch (error: any) {
    console.error('Error verifying report:', error);
    return {
      success: false,
      verified: false,
      message: error.message || 'Failed to verify report'
    };
  }
};
